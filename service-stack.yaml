AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a Application Load Balancer.

Parameters:
  StackName:
    Type: String
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Description: A name for the service
  FamilyName:
    Type: String
    Description: A name for the service
  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  VPCId:
    Type: String
    Description: VPC Id in which EFS will be created
  PublicSubnetOne:
    Type: String
    Description: Public Subnet One
  PublicSubnetTwo:
    Type: String
    Description: Public Subnet Two
  ElasticFileSystem:
    Type: String
    Description: EFS Id for Task Definition
  ClusterName:
    Type: String
    Description: The name of the ECS cluster
  ECSTaskExecutionRole:
    Type: String
    Description: The ARN of the ECS role
  PublicListener:
    Type: String
    Description: The ARN of the public load balancer's Listener
  FargateContainerSecurityGroup:
    Type: String
    Description: A security group used to allow Fargate containers to receive traffic
  Region:
    Type: String
    Description: AWS Region for CloudWatch Logs


Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref FamilyName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref Role
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          MountPoints: 
            - SourceVolume: "efs-volume"
              ContainerPath: "/usr/share/nginx/html"
          LogConfiguration:
            LogDriver: awslogs
            Options: 
              awslogs-group: !Ref FargateTaskLogGroup
              awslogs-region: !Ref Region
              awslogs-stream-prefix: !Ref FamilyName
      Volumes: 
        - Name: "efs-volume"
          EFSVolumeConfiguration:
            FilesystemId: !Ref ElasticFileSystem
            TransitEncryption: ENABLED

  FargateTaskLogGroup:
      Type: 'AWS::Logs::LogGroup'
      DeletionPolicy: Delete
      Properties:
          LogGroupName: !Sub '/ecs/${StackName}-logs'
          RetentionInDays: 7    

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref PublicListener
      Priority: !Ref Priority